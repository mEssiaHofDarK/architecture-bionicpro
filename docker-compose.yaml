version: '3.8'

services:
  keycloak_db:
    image: postgres:14
    container_name: keycloack_db
    environment:
      POSTGRES_DB: keycloak_db
      POSTGRES_USER: keycloak_user
      POSTGRES_PASSWORD: keycloak_password
    volumes:
      - ./postgres-keycloak-data:/var/lib/postgresql/data
    ports:
      - "5433:5432"
    networks:
      - my_network

  keycloak:
    image: quay.io/keycloak/keycloak:21.1
    container_name: keycloak
    environment:
      KEYCLOAK_ADMIN: admin
      KEYCLOAK_ADMIN_PASSWORD: admin
      KC_DB: postgres
      KC_DB_URL: jdbc:postgresql://keycloak_db:5432/keycloak_db
      KC_DB_USERNAME: keycloak_user
      KC_DB_PASSWORD: keycloak_password
    command: 
      - start-dev
      - --import-realm
    volumes:
      - ./keycloak/realm-export.json:/opt/keycloak/data/import/realm-export.json
    ports:
      - "8080:8080"
    depends_on:
      - keycloak_db
    networks:
      - my_network

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: frontend
    ports:
      - "3000:3000"
    environment:
      REACT_APP_API_URL: http://localhost:8000
      REACT_APP_KEYCLOAK_URL: http://localhost:8080
      REACT_APP_KEYCLOAK_REALM: reports-realm
      REACT_APP_KEYCLOAK_CLIENT_ID: reports-frontend
    networks:
      - my_network

  clickhouse:
    image: yandex/clickhouse-server
    container_name: clickhouse
    ports:
      - "8123:8123"
    volumes:
      - ./clickhouse/users.xml:/etc/clickhouse-server/users.d/users.xml
      - ./clickhouse/db/init-db.sql:/docker-entrypoint-initdb.d/db.sql
    networks:
      - my_network

  api:
    build:
      context: ./api
      dockerfile: Dockerfile
    container_name: api
#    environment:
#      ...
    ports:
      - "8000:8000"
    networks:
      - my_network

  x-airflow-common: &airflow-common
    build:
      context: ./airflow
      dockerfile: Dockerfile
    environment: &airflow-common-env
      AIRFLOW__CORE__EXECUTOR: LocalExecutor #локальный запуск
      AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@airflow_meta_db/airflow
      AIRFLOW__CORE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@airflow_meta_db/airflow
      AIRFLOW__CORE__FERNET_KEY: ''
      AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: 'true'
      AIRFLOW__CORE__LOAD_EXAMPLES: 'false'
      AIRFLOW__API__AUTH_BACKENDS: 'airflow.api.auth.backend.basic_auth,airflow.api.auth.backend.session'
      AIRFLOW__SCHEDULER__ENABLE_HEALTH_CHECK: 'true'
      AIRFLOW__WEBSERVER__SECRET_KEY: 'your_airflow_webserver_sec_key'
      _PIP_ADDITIONAL_REQUIREMENTS: ''
      AIRFLOW_INPUT_DIR: '/opt/airflow/dag-inputs'
    volumes:
      - ./airflow/dags:/opt/airflow/dags
      - ./airflow/dags/sql:/opt/airflow/dags/sql
      - ./airflow/requirements.txt:/opt/airflow/requirements.txt
      - ./airflow/data:/opt/airflow/sample_files
    user: "${AIRFLOW_UID:-50000}:0"
    depends_on: &airflow-common-depends-on
      airflow_meta_db:
        condition: service_healthy
    networks:
      - my_network

  airflow_meta_db:
    image: postgres:16.0
    container_name: airflow_db
    volumes:
      - ./airflow/db/init-db.sql:/docker-entrypoint-initdb.d/db.sql
    environment:
      POSTGRES_USER: airflow
      POSTGRES_PASSWORD: airflow
      POSTGRES_DB: airflow
    logging:
      options:
        max-size: 10m
        max-file: "3"
    healthcheck:
      test:
        - CMD
        - pg_isready
        - -U
        - airflow
      interval: 10s
      retries: 5
      start_period: 5s
    restart: always
    networks:
      - my_network

  airflow-webserver:
    <<: *airflow-common
    container_name: airflow_web
    ports:
      - "8081:8080"
    depends_on:
      airflow_meta_db:
        condition: service_healthy
      airflow-init:
        condition: service_completed_successfully
    command: webserver
    networks:
      - my_network
    healthcheck:
      test: [ "CMD-SHELL", "curl -f http://localhost:8080/health || exit 1" ]
      interval: 30s
      timeout: 10s
      retries: 3

  airflow-scheduler:
    <<: *airflow-common
    container_name: airflow_sch
    networks:
      - my_network
    command: scheduler
    depends_on:
      airflow_meta_db:
        condition: service_healthy
      airflow-webserver:
        condition: service_healthy
    healthcheck:
      test: [ "CMD-SHELL", "curl -f http://localhost:8080/health || exit 1" ]
      interval: 30s
      timeout: 10s
      retries: 3

  airflow-triggerer:
    <<: *airflow-common
    container_name: airflow_trg
    depends_on:
      airflow_meta_db:
        condition: service_healthy
      airflow-init:
        condition: service_completed_successfully
    networks:
      - my_network
    command: bash -c "airflow triggerer"
    healthcheck:
      test:
        - CMD-SHELL
        - airflow jobs check --job-type TriggererJob --hostname "${HOSTNAME}"
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: always

  airflow-cli:
    <<: *airflow-common
    container_name: airflow_cli
    depends_on:
      airflow_meta_db:
        condition: service_healthy
    networks:
      - my_network
    profiles:
      - debug
    command:
      - bash
      - -c
      - airflow

  airflow-init:
    <<: *airflow-common
    depends_on:
      airflow_meta_db:
        condition: service_healthy
    command: >
      bash -c "airflow db init && airflow users create --username admin --firstname admin --lastname admin --role Admin --email admin@sample.ru --password admin"
    networks:
      - my_network

networks:
  my_network:
    driver: bridge
